<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Special Methods on My Learning Notebook</title>
    <link>http://hanx11.github.io/blog/public/tags/special-methods/</link>
    <description>Recent content in Special Methods on My Learning Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Code released under the Apache 2.0 license.</copyright>
    <lastBuildDate>Mon, 15 Jan 2018 14:52:59 +0800</lastBuildDate>
    
	<atom:link href="http://hanx11.github.io/blog/public/tags/special-methods/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How special methods are used in Python</title>
      <link>http://hanx11.github.io/blog/public/post/how-special-methods-are-used-in-python/</link>
      <pubDate>Mon, 15 Jan 2018 14:52:59 +0800</pubDate>
      
      <guid>http://hanx11.github.io/blog/public/post/how-special-methods-are-used-in-python/</guid>
      <description>The first thing to know about special methods is that they are meant to be called by the Python interpreter, and not by you.
You don&amp;rsquo;t write my_object.__len__(). You write len(my_object) and, if my_object is an instance of a user definded class, then Python calls the __len__ instance method you implemented.
首先，关于特殊方法，你需要知道的是它们是用来被Python解释器调用的，而不是你。你不应该这样写 my_object.__len__(), 而应该这样写 len(my_object), 如果 my_object 是一个用户定义的类, Python解释器会调用你实现的 __len__() 方法。  But for built-in types like list, str, bytearray etc.</description>
    </item>
    
  </channel>
</rss>